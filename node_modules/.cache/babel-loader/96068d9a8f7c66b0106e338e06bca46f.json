{"ast":null,"code":"import _classCallCheck from \"/Users/anyanguyen/Desktop/simple-resume/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anyanguyen/Desktop/simple-resume/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/anyanguyen/Desktop/simple-resume/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/anyanguyen/Desktop/simple-resume/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/anyanguyen/Desktop/simple-resume/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/anyanguyen/Desktop/simple-resume/src/components/Work.js\";\nimport React, { Component } from \"react\";\nimport P5Wrapper from \"react-p5-wrapper\";\nimport ReactTypingEffect from \"react-typing-effect\";\nimport \"./Component.css\";\nvar width = window.innerWidth / 2;\nvar height = window.innerHeight;\n\nvar Work =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Work, _Component);\n\n  function Work() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Work);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Work)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.sketch1 = function (p) {\n      var k;\n\n      p.setup = function () {\n        p.createCanvas(width, height);\n        p.frameRate(1); // Animate slowly\n\n        k = new KochFractal();\n      };\n\n      p.draw = function () {\n        p.background(0); // Draws the snowflake!\n\n        k.render(); // Iterate\n\n        k.nextLevel(); // Let's not do it more than 5 times. . .\n\n        if (k.getCount() > 5) {\n          k.restart();\n        }\n      }; // A class to describe one line segment in the fractal\n      // Includes methods to calculate midp5.Vectors along the line according to the Koch algorithm\n\n\n      var KochLine =\n      /*#__PURE__*/\n      function () {\n        function KochLine(a, b) {\n          _classCallCheck(this, KochLine);\n\n          // Two p5.Vectors,\n          // start is the \"left\" p5.Vector and\n          // end is the \"right p5.Vector\n          this.start = a.copy();\n          this.end = b.copy();\n        }\n\n        _createClass(KochLine, [{\n          key: \"display\",\n          value: function display() {\n            p.stroke(255);\n            p.line(this.start.x, this.start.y, this.end.x, this.end.y);\n          }\n        }, {\n          key: \"kochA\",\n          value: function kochA() {\n            return this.start.copy();\n          } // This is easy, just 1/3 of the way\n\n        }, {\n          key: \"kochB\",\n          value: function kochB() {\n            var v = p.Vector.sub(this.end, this.start);\n            v.div(3);\n            v.add(this.start);\n            return v;\n          } // More complicated, have to use a little trig to figure out where this p5.Vector is!\n\n        }, {\n          key: \"kochC\",\n          value: function kochC() {\n            var a = this.start.copy(); // Start at the beginning\n\n            var v = p.Vector.sub(this.end, this.start);\n            v.div(3);\n            a.add(v); // Move to point B\n\n            v.rotate(-p.PI / 3); // Rotate 60 degrees\n\n            a.add(v); // Move to point C\n\n            return a;\n          } // Easy, just 2/3 of the way\n\n        }, {\n          key: \"kochD\",\n          value: function kochD() {\n            var v = p.Vector.sub(this.end, this.start);\n            v.mult(2 / 3.0);\n            v.add(this.start);\n            return v;\n          }\n        }, {\n          key: \"kochE\",\n          value: function kochE() {\n            return this.end.copy();\n          }\n        }]);\n\n        return KochLine;\n      }(); // A class to manage the list of line segments in the snowflake pattern\n\n\n      var KochFractal =\n      /*#__PURE__*/\n      function () {\n        function KochFractal() {\n          _classCallCheck(this, KochFractal);\n\n          this.start = p.createVector(0, height - 20); // A p5.Vector for the start\n\n          this.end = p.createVector(width, height - 20); // A p5.Vector for the end\n\n          this.lines = []; // An array to keep track of all the lines\n\n          this.count = 0;\n          this.restart();\n        }\n\n        _createClass(KochFractal, [{\n          key: \"nextLevel\",\n          value: function nextLevel() {\n            // For every line that is in the arraylist\n            // create 4 more lines in a new arraylist\n            this.lines = this.iterate(this.lines);\n            this.count++;\n          }\n        }, {\n          key: \"restart\",\n          value: function restart() {\n            this.count = 0; // Reset count\n\n            this.lines = []; // Empty the array list\n\n            this.lines.push(new KochLine(this.start, this.end)); // Add the initial line (from one end p5.Vector to the other)\n          }\n        }, {\n          key: \"getCount\",\n          value: function getCount() {\n            return this.count;\n          } // This is easy, just draw all the lines\n\n        }, {\n          key: \"render\",\n          value: function render() {\n            for (var i = 0; i < this.lines.length; i++) {\n              this.lines[i].display();\n            }\n          } // This is where the **MAGIC** happens\n          // Step 1: Create an empty arraylist\n          // Step 2: For every line currently in the arraylist\n          //   - calculate 4 line segments based on Koch algorithm\n          //   - add all 4 line segments into the new arraylist\n          // Step 3: Return the new arraylist and it becomes the list of line segments for the structure\n          // As we do this over and over again, each line gets broken into 4 lines, which gets broken into 4 lines, and so on. . .\n\n        }, {\n          key: \"iterate\",\n          value: function iterate(before) {\n            var now = []; // Create emtpy list\n\n            for (var i = 0; i < this.lines.length; i++) {\n              var l = this.lines[i]; // Calculate 5 koch p5.Vectors (done for us by the line object)\n\n              var a = l.kochA();\n              var b = l.kochB();\n              var c = l.kochC();\n              var d = l.kochD();\n              var e = l.kochE(); // Make line segments between all the p5.Vectors and add them\n\n              now.push(new KochLine(a, b));\n              now.push(new KochLine(b, c));\n              now.push(new KochLine(c, d));\n              now.push(new KochLine(d, e));\n            }\n\n            return now;\n          }\n        }]);\n\n        return KochFractal;\n      }();\n    };\n\n    return _this;\n  }\n\n  _createClass(Work, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"draw-side\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(P5Wrapper, {\n        className: \"p5\",\n        sketch: this.sketch1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"text-side\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"Career path can also be zigzaggy\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"People have a notion of a career ladder, that skillsets and experiences should bring you up and up. And though I agree that patience and time perfects you at a skillset, it does not make you a well rounded person. And, as I experinced different educational background, I also experienced a difference in working culture.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }), \"brr to be filled\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), React.createElement(ReactTypingEffect, {\n        text: \"sth deep here\",\n        eraseDelay: \"2500\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Work;\n}(Component);\n\nexport default Work;","map":{"version":3,"sources":["/Users/anyanguyen/Desktop/simple-resume/src/components/Work.js"],"names":["React","Component","P5Wrapper","ReactTypingEffect","width","window","innerWidth","height","innerHeight","Work","sketch1","p","k","setup","createCanvas","frameRate","KochFractal","draw","background","render","nextLevel","getCount","restart","KochLine","a","b","start","copy","end","stroke","line","x","y","v","Vector","sub","div","add","rotate","PI","mult","createVector","lines","count","iterate","push","i","length","display","before","now","l","kochA","kochB","c","kochC","d","kochD","e","kochE"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport P5Wrapper from \"react-p5-wrapper\";\nimport ReactTypingEffect from \"react-typing-effect\";\nimport \"./Component.css\";\n\nconst width = window.innerWidth / 2;\nconst height = window.innerHeight;\n\nclass Work extends Component {\n  sketch1 = p => {\n    let k;\n    p.setup = function() {\n      p.createCanvas(width, height);\n      p.frameRate(1); // Animate slowly\n      k = new KochFractal();\n    };\n\n    p.draw = function() {\n      p.background(0);\n      // Draws the snowflake!\n      k.render();\n      // Iterate\n      k.nextLevel();\n      // Let's not do it more than 5 times. . .\n      if (k.getCount() > 5) {\n        k.restart();\n      }\n    };\n\n    // A class to describe one line segment in the fractal\n    // Includes methods to calculate midp5.Vectors along the line according to the Koch algorithm\n\n    class KochLine {\n      constructor(a, b) {\n        // Two p5.Vectors,\n        // start is the \"left\" p5.Vector and\n        // end is the \"right p5.Vector\n        this.start = a.copy();\n        this.end = b.copy();\n      }\n\n      display() {\n        p.stroke(255);\n        p.line(this.start.x, this.start.y, this.end.x, this.end.y);\n      }\n\n      kochA() {\n        return this.start.copy();\n      }\n\n      // This is easy, just 1/3 of the way\n      kochB() {\n        let v = p.Vector.sub(this.end, this.start);\n        v.div(3);\n        v.add(this.start);\n        return v;\n      }\n\n      // More complicated, have to use a little trig to figure out where this p5.Vector is!\n      kochC() {\n        let a = this.start.copy(); // Start at the beginning\n        let v = p.Vector.sub(this.end, this.start);\n        v.div(3);\n        a.add(v); // Move to point B\n        v.rotate(-p.PI / 3); // Rotate 60 degrees\n        a.add(v); // Move to point C\n        return a;\n      }\n\n      // Easy, just 2/3 of the way\n      kochD() {\n        let v = p.Vector.sub(this.end, this.start);\n        v.mult(2 / 3.0);\n        v.add(this.start);\n        return v;\n      }\n\n      kochE() {\n        return this.end.copy();\n      }\n    }\n\n    // A class to manage the list of line segments in the snowflake pattern\n\n    class KochFractal {\n      constructor() {\n        this.start = p.createVector(0, height - 20); // A p5.Vector for the start\n        this.end = p.createVector(width, height - 20); // A p5.Vector for the end\n        this.lines = []; // An array to keep track of all the lines\n        this.count = 0;\n        this.restart();\n      }\n\n      nextLevel() {\n        // For every line that is in the arraylist\n        // create 4 more lines in a new arraylist\n        this.lines = this.iterate(this.lines);\n        this.count++;\n      }\n\n      restart() {\n        this.count = 0; // Reset count\n        this.lines = []; // Empty the array list\n        this.lines.push(new KochLine(this.start, this.end)); // Add the initial line (from one end p5.Vector to the other)\n      }\n\n      getCount() {\n        return this.count;\n      }\n\n      // This is easy, just draw all the lines\n      render() {\n        for (let i = 0; i < this.lines.length; i++) {\n          this.lines[i].display();\n        }\n      }\n\n      // This is where the **MAGIC** happens\n      // Step 1: Create an empty arraylist\n      // Step 2: For every line currently in the arraylist\n      //   - calculate 4 line segments based on Koch algorithm\n      //   - add all 4 line segments into the new arraylist\n      // Step 3: Return the new arraylist and it becomes the list of line segments for the structure\n\n      // As we do this over and over again, each line gets broken into 4 lines, which gets broken into 4 lines, and so on. . .\n      iterate(before) {\n        let now = []; // Create emtpy list\n        for (let i = 0; i < this.lines.length; i++) {\n          let l = this.lines[i];\n          // Calculate 5 koch p5.Vectors (done for us by the line object)\n          let a = l.kochA();\n          let b = l.kochB();\n          let c = l.kochC();\n          let d = l.kochD();\n          let e = l.kochE();\n          // Make line segments between all the p5.Vectors and add them\n          now.push(new KochLine(a, b));\n          now.push(new KochLine(b, c));\n          now.push(new KochLine(c, d));\n          now.push(new KochLine(d, e));\n        }\n        return now;\n      }\n    }\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"draw-side\">\n          <P5Wrapper className=\"p5\" sketch={this.sketch1} />\n        </div>\n        <div className=\"text-side\">\n          <h3>Career path can also be zigzaggy</h3>\n          <p>\n            People have a notion of a career ladder, that skillsets and\n            experiences should bring you up and up. And though I agree that\n            patience and time perfects you at a skillset, it does not make you a\n            well rounded person. And, as I experinced different educational\n            background, I also experienced a difference in working culture.\n            <br />\n            <br />\n            brr to be filled\n            <br />\n            <br />\n            <br />\n            <br />\n            <ReactTypingEffect text=\"sth deep here\" eraseDelay=\"2500\" />\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Work;\n"]},"metadata":{},"sourceType":"module"}